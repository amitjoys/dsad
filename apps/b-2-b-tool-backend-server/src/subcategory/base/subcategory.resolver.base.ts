/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Subcategory } from "./Subcategory";
import { SubcategoryCountArgs } from "./SubcategoryCountArgs";
import { SubcategoryFindManyArgs } from "./SubcategoryFindManyArgs";
import { SubcategoryFindUniqueArgs } from "./SubcategoryFindUniqueArgs";
import { CreateSubcategoryArgs } from "./CreateSubcategoryArgs";
import { UpdateSubcategoryArgs } from "./UpdateSubcategoryArgs";
import { DeleteSubcategoryArgs } from "./DeleteSubcategoryArgs";
import { ToolFindManyArgs } from "../../tool/base/ToolFindManyArgs";
import { Tool } from "../../tool/base/Tool";
import { Category } from "../../category/base/Category";
import { SubcategoryService } from "../subcategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Subcategory)
export class SubcategoryResolverBase {
  constructor(
    protected readonly service: SubcategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "read",
    possession: "any",
  })
  async _subcategoriesMeta(
    @graphql.Args() args: SubcategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Subcategory])
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "read",
    possession: "any",
  })
  async subcategories(
    @graphql.Args() args: SubcategoryFindManyArgs
  ): Promise<Subcategory[]> {
    return this.service.subcategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Subcategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "read",
    possession: "own",
  })
  async subcategory(
    @graphql.Args() args: SubcategoryFindUniqueArgs
  ): Promise<Subcategory | null> {
    const result = await this.service.subcategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subcategory)
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "create",
    possession: "any",
  })
  async createSubcategory(
    @graphql.Args() args: CreateSubcategoryArgs
  ): Promise<Subcategory> {
    return await this.service.createSubcategory({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subcategory)
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "update",
    possession: "any",
  })
  async updateSubcategory(
    @graphql.Args() args: UpdateSubcategoryArgs
  ): Promise<Subcategory | null> {
    try {
      return await this.service.updateSubcategory({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Subcategory)
  @nestAccessControl.UseRoles({
    resource: "Subcategory",
    action: "delete",
    possession: "any",
  })
  async deleteSubcategory(
    @graphql.Args() args: DeleteSubcategoryArgs
  ): Promise<Subcategory | null> {
    try {
      return await this.service.deleteSubcategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Tool], { name: "tools" })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "any",
  })
  async findTools(
    @graphql.Parent() parent: Subcategory,
    @graphql.Args() args: ToolFindManyArgs
  ): Promise<Tool[]> {
    const results = await this.service.findTools(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async getCategory(
    @graphql.Parent() parent: Subcategory
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

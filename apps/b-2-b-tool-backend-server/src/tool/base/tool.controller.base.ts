/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ToolService } from "../tool.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ToolCreateInput } from "./ToolCreateInput";
import { Tool } from "./Tool";
import { ToolFindManyArgs } from "./ToolFindManyArgs";
import { ToolWhereUniqueInput } from "./ToolWhereUniqueInput";
import { ToolUpdateInput } from "./ToolUpdateInput";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { RatingWhereUniqueInput } from "../../rating/base/RatingWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ToolControllerBase {
  constructor(
    protected readonly service: ToolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tool })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTool(@common.Body() data: ToolCreateInput): Promise<Tool> {
    return await this.service.createTool({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        subcategory: data.subcategory
          ? {
              connect: data.subcategory,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        createdBy: true,
        csvUploadFile: true,
        description: true,
        features: true,
        id: true,
        isFeatured: true,
        logo: true,
        name: true,
        pricingDetails: true,
        status: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tool] })
  @ApiNestedQuery(ToolFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tools(@common.Req() request: Request): Promise<Tool[]> {
    const args = plainToClass(ToolFindManyArgs, request.query);
    return this.service.tools({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        createdBy: true,
        csvUploadFile: true,
        description: true,
        features: true,
        id: true,
        isFeatured: true,
        logo: true,
        name: true,
        pricingDetails: true,
        status: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tool(
    @common.Param() params: ToolWhereUniqueInput
  ): Promise<Tool | null> {
    const result = await this.service.tool({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        createdBy: true,
        csvUploadFile: true,
        description: true,
        features: true,
        id: true,
        isFeatured: true,
        logo: true,
        name: true,
        pricingDetails: true,
        status: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTool(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() data: ToolUpdateInput
  ): Promise<Tool | null> {
    try {
      return await this.service.updateTool({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          subcategory: data.subcategory
            ? {
                connect: data.subcategory,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          createdBy: true,
          csvUploadFile: true,
          description: true,
          features: true,
          id: true,
          isFeatured: true,
          logo: true,
          name: true,
          pricingDetails: true,
          status: true,

          subcategory: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTool(
    @common.Param() params: ToolWhereUniqueInput
  ): Promise<Tool | null> {
    try {
      return await this.service.deleteTool({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          createdBy: true,
          csvUploadFile: true,
          description: true,
          features: true,
          id: true,
          isFeatured: true,
          logo: true,
          name: true,
          pricingDetails: true,
          status: true,

          subcategory: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ratings")
  @ApiNestedQuery(RatingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async findRatings(
    @common.Req() request: Request,
    @common.Param() params: ToolWhereUniqueInput
  ): Promise<Rating[]> {
    const query = plainToClass(RatingFindManyArgs, request.query);
    const results = await this.service.findRatings(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        review: {
          select: {
            id: true,
          },
        },

        score: true,

        tool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async connectRatings(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        connect: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async updateRatings(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        set: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async disconnectRatings(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        disconnect: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: ToolWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,
        published: true,
        reviewDate: true,
        title: true,

        tool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async connectReviews(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async updateReviews(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async disconnectReviews(
    @common.Param() params: ToolWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateTool({
      where: params,
      data,
      select: { id: true },
    });
  }
}

# Production Docker Compose Configuration for ConstructPune
version: '3.8'

services:
  # Load Balancer / Reverse Proxy
  nginx-lb:
    image: nginx:alpine
    container_name: constructpune_nginx_lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app1
      - app2
    networks:
      - constructpune_frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Instance 1
  app1:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: constructpune_app1
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb1:27017,mongodb2:27017,mongodb3:27017/constructpune_db?authSource=admin&replicaSet=rs0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - INSTANCE_ID=app1
    volumes:
      - ../logs:/var/log/supervisor
      - ../uploads:/app/uploads
    depends_on:
      - mongodb1
    networks:
      - constructpune_frontend
      - constructpune_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Instance 2
  app2:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: constructpune_app2
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb1:27017,mongodb2:27017,mongodb3:27017/constructpune_db?authSource=admin&replicaSet=rs0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - INSTANCE_ID=app2
    volumes:
      - ../logs:/var/log/supervisor
      - ../uploads:/app/uploads
    depends_on:
      - mongodb1
    networks:
      - constructpune_frontend
      - constructpune_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Primary
  mongodb1:
    image: mongo:7.0
    container_name: constructpune_mongodb1
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: constructpune_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb1_data:/data/db
      - ./mongo-replica.conf:/etc/mongod.conf:ro
      - ./mongo-init-replica.js:/docker-entrypoint-initdb.d/mongo-init-replica.js:ro
    command: mongod --config /etc/mongod.conf --replSet rs0
    networks:
      - constructpune_backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Secondary 1
  mongodb2:
    image: mongo:7.0
    container_name: constructpune_mongodb2
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodb2_data:/data/db
      - ./mongo-replica.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf --replSet rs0
    depends_on:
      - mongodb1
    networks:
      - constructpune_backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Secondary 2
  mongodb3:
    image: mongo:7.0
    container_name: constructpune_mongodb3
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodb3_data:/data/db
      - ./mongo-replica.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf --replSet rs0
    depends_on:
      - mongodb1
    networks:
      - constructpune_backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7.2-alpine
    container_name: constructpune_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - constructpune_backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup:
    image: mongo:7.0
    container_name: constructpune_backup
    restart: "no"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_PASSWORD}@mongodb1:27017,mongodb2:27017,mongodb3:27017/constructpune_db?authSource=admin&replicaSet=rs0
    volumes:
      - ../backups:/backups
      - ./backup.sh:/backup.sh:ro
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    networks:
      - constructpune_backend
    command: ["sh", "/backup.sh"]

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: constructpune_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - constructpune_backend

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: constructpune_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - constructpune_backend

volumes:
  mongodb1_data:
    driver: local
  mongodb2_data:
    driver: local
  mongodb3_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  constructpune_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  constructpune_backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24